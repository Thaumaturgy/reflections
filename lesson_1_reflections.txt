Reflection 1: How did viewing a two versions of files help you spot the bug?
Keeping multiple versions of the file as it updates makes it convenient for us to check up and sport the differences.
FC file1.js file2.js //this command in cmd helps locate such differences

Reflection 2: 
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
We can easily revert to an older version.
Or maybe a more important version of a file when we have version control.

Reflection 3:
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
It gives users the power to choose when to commit. 
However, this means that the users have to judge the appropriate time to commit.
Do not commit too early or too late.

Reflection 4:
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git is a specialized version control system for code. It's harder for Google Docs to treat multiple files in a single repository as one because it's a general purpose storage system.

Reflection 5:
How can you use the commands git log and git diff to view the history of files?
git log shows us a log of all the different versions of the files we've worked on. git diff let's us see the changed done through out the entire history of the files.

Reflection 6:
How might using version control make you more confident to make changes that could break something?
We can always backtrack and find the mistake.

Now that you have your workspace set up, what do you want to try using Git for?
Mainly for saving other projects that I'll be working on in other courses.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
We can rollback errors and debug programs quickly. It also allows me to study where I might've changed the program to cause a certain error.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
With Git, we have control over when we want to create a commit. This allows our commits to be created logically and thus meaningfully. The con of manually choosing when to commit is that it is vulnerable to user error. If the user does not practice good committing practices, the commit history can get cluttered with confusing commits.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Well, Git is used for code version control, and generally, code projects tend to have files that are used together. So saving multiple files at once in a commit is more appropriate.

How can you use the commands git log and git diff to view the history of files?
git log - used for viewing history. The additional --stat shows which lines were edited per version.
git diff - can be used to view differences between two versions, and which lines were added or removed. 

How might using version control make you more confident to make changes that could break something?
Whenever a bug is found, we can use the git checkout to checkout old code to see which version first contained the bug. After finding the version that introduced the bug, we can used git diff to compare between the buggy version and the version before that to check which lines were changed (added or removed).

Now that you have your workspace set up, what do you want to try using Git for?
Definitely for my mobile and web projects!
